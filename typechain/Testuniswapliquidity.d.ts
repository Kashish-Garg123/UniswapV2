/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TestuniswapliquidityInterface extends ethers.utils.Interface {
  functions: {
    "addliquidity(address,address,uint256,uint256)": FunctionFragment;
    "collectedfee(address,address)": FunctionFragment;
    "feeprcnt()": FunctionFragment;
    "getAmountOutMin(address,address,uint256)": FunctionFragment;
    "getreseves()": FunctionFragment;
    "removeLiquidity(address,address)": FunctionFragment;
    "setperc(uint256)": FunctionFragment;
    "swap(address[],uint256,uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addliquidity",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collectedfee",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "feeprcnt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAmountOutMin",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getreseves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setperc",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [string[], BigNumberish, BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addliquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectedfee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeprcnt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAmountOutMin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getreseves", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setperc", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;

  events: {
    "Log(string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Log"): EventFragment;
}

export type LogEvent = TypedEvent<
  [string, BigNumber] & { message: string; value: BigNumber }
>;

export class Testuniswapliquidity extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TestuniswapliquidityInterface;

  functions: {
    addliquidity(
      _tokenA: string,
      _tokenB: string,
      _amountA: BigNumberish,
      _amountB: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collectedfee(
      tokenadrs: string,
      ltwoadrs: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    feeprcnt(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAmountOutMin(
      _tokenIn: string,
      _tokenOut: string,
      _amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getreseves(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number] & {
        r1: BigNumber;
        r2: BigNumber;
        b: number;
      }
    >;

    removeLiquidity(
      _tokenA: string,
      _tokenB: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setperc(
      _feeprcnt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swap(
      path: string[],
      _amountIn: BigNumberish,
      _amountOutMin: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addliquidity(
    _tokenA: string,
    _tokenB: string,
    _amountA: BigNumberish,
    _amountB: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collectedfee(
    tokenadrs: string,
    ltwoadrs: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  feeprcnt(overrides?: CallOverrides): Promise<BigNumber>;

  getAmountOutMin(
    _tokenIn: string,
    _tokenOut: string,
    _amountIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getreseves(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number] & { r1: BigNumber; r2: BigNumber; b: number }
  >;

  removeLiquidity(
    _tokenA: string,
    _tokenB: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setperc(
    _feeprcnt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swap(
    path: string[],
    _amountIn: BigNumberish,
    _amountOutMin: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addliquidity(
      _tokenA: string,
      _tokenB: string,
      _amountA: BigNumberish,
      _amountB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    collectedfee(
      tokenadrs: string,
      ltwoadrs: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeprcnt(overrides?: CallOverrides): Promise<BigNumber>;

    getAmountOutMin(
      _tokenIn: string,
      _tokenOut: string,
      _amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getreseves(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number] & {
        r1: BigNumber;
        r2: BigNumber;
        b: number;
      }
    >;

    removeLiquidity(
      _tokenA: string,
      _tokenB: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setperc(_feeprcnt: BigNumberish, overrides?: CallOverrides): Promise<void>;

    swap(
      path: string[],
      _amountIn: BigNumberish,
      _amountOutMin: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Log(string,uint256)"(
      message?: null,
      value?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { message: string; value: BigNumber }
    >;

    Log(
      message?: null,
      value?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { message: string; value: BigNumber }
    >;
  };

  estimateGas: {
    addliquidity(
      _tokenA: string,
      _tokenB: string,
      _amountA: BigNumberish,
      _amountB: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collectedfee(
      tokenadrs: string,
      ltwoadrs: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeprcnt(overrides?: CallOverrides): Promise<BigNumber>;

    getAmountOutMin(
      _tokenIn: string,
      _tokenOut: string,
      _amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getreseves(overrides?: CallOverrides): Promise<BigNumber>;

    removeLiquidity(
      _tokenA: string,
      _tokenB: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setperc(
      _feeprcnt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swap(
      path: string[],
      _amountIn: BigNumberish,
      _amountOutMin: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addliquidity(
      _tokenA: string,
      _tokenB: string,
      _amountA: BigNumberish,
      _amountB: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collectedfee(
      tokenadrs: string,
      ltwoadrs: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeprcnt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAmountOutMin(
      _tokenIn: string,
      _tokenOut: string,
      _amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getreseves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeLiquidity(
      _tokenA: string,
      _tokenB: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setperc(
      _feeprcnt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swap(
      path: string[],
      _amountIn: BigNumberish,
      _amountOutMin: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
